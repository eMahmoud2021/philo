{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Futura-Bold;\f1\fnil\fcharset0 Futura-MediumItalic;\f2\fnil\fcharset0 Futura-Medium;
}
{\colortbl;\red255\green255\blue255;\red33\green33\blue39;\red255\green255\blue255;\red77\green173\blue74;
\red77\green173\blue74;\red205\green76\blue92;}
{\*\expandedcolortbl;;\cssrgb\c17255\c17255\c20392;\cssrgb\c100000\c100000\c100000;\cssrgb\c36078\c72157\c36078;
\cssrgb\c36078\c72157\c36078\c5098;\cssrgb\c84706\c38824\c43529;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa60\partightenfactor0

\f0\b\fs56 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Partie obligatoire\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\i\b0\fs32 \cf2 \
\pard\pardeftab720\sl440\sa220\partightenfactor0

\f0\i0\b\fs40 \cf2 \cb3 Gestion d'erreur\cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 Ce projet doit \'eatre cod\'e9 en C en respectant la Norme. Tout crash,\cb1 \uc0\u8232 \cb3 comportement ind\'e9termin\'e9, fuite m\'e9moire ou erreur de Norme signifie 0 au\cb1 \uc0\u8232 \cb3 projet.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf4 \cb5 \strokec4 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb6 \strokec3 \'a0No\
\pard\pardeftab720\sl440\sa220\partightenfactor0

\f0\b\fs40 \cf2 \cb3 \strokec2 Variables globales\cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 Cherchez s'il y a une variable globale utilis\'e9e afin de g\'e9rer les\cb1 \uc0\u8232 \cb3 ressources partag\'e9es entre les philosophes.\cb1 \uc0\u8232 \cb3 Si vous en trouvez, l'\'e9valuation s'arr\'eate ici. Vous pouvez continuer \'e0\cb1 \uc0\u8232 \cb3 regarder le code et \'e9changer, mais ne le notez pas.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf4 \cb5 \strokec4 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb6 \strokec3 \'a0No\
\pard\pardeftab720\sl440\sa220\partightenfactor0

\f0\b\fs40 \cf2 \cb3 \strokec2 Code de philo\cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 - V\'e9rifiez que le code de philo respecte les points suivants et\cb1 \uc0\u8232 \cb3 demandez des explications :\cb1 \uc0\u8232 \cb3 - Assurez-vous qu'il y a un thread par philosophe.\cb1 \uc0\u8232 \cb3 - Assurez-vous qu'il y a bien une fourchette par philosophe.\cb1 \uc0\u8232 \cb3 - Assurez-vous qu'il y a un mutex par fourchette et qu'il est utilis\'e9\cb1 \uc0\u8232 \cb3 pour v\'e9rifier la valeur de la fourchette et/ou la changer.\cb1 \uc0\u8232 \cb3 - V\'e9rifiez que l'output est prot\'e9g\'e9 contre les acc\'e8s multiples afin\cb1 \uc0\u8232 \cb3 d'\'e9viter un affichage m\'e9lang\'e9.\cb1 \uc0\u8232 \cb3 - V\'e9rifiez que la mort d'un philosophe est prise en compte et qu'il y\cb1 \uc0\u8232 \cb3 a un mutex emp\'eachant le philosophe de mourir et de commencer \'e0 manger\cb1 \uc0\u8232 \cb3 exactement au m\'eame moment.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf4 \cb5 \strokec4 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb6 \strokec3 \'a0No\
\pard\pardeftab720\sl440\sa220\partightenfactor0

\f0\b\fs40 \cf2 \cb3 \strokec2 Tests philo\cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 - Ne testez pas avec plus de 200 philosphes.\cb1 \uc0\u8232 \cb3 - Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep set\cb1 \uc0\u8232 \cb3 \'e0 une valeur inf\'e9rieure \'e0 60 ms.\cb1 \uc0\u8232 \cb3 - Testez avec 1 800 200 200. Le philosophe ne devrait pas manger et\cb1 \uc0\u8232 \cb3 devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 5 800 200 200. Aucun philosophe ne devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 5 800 200 200 7. Aucun philosophe ne devrait mourir et\cb1 \uc0\u8232 \cb3 la args devrait s'arr\'eater quand les philosophes ont mang\'e9 au\cb1 \uc0\u8232 \cb3 moins 7 fois chacun.\cb1 \uc0\u8232 \cb3 - Testez avec 4 410 200 200. Aucun philosophe ne devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 4 310 200 100. Un philosophe devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 2 philosophes et v\'e9rifiez les timings (une mort prise en\cb1 \uc0\u8232 \cb3 compte avec un retard de plus de 10 ms est inacceptable).\cb1 \uc0\u8232 \cb3 - Testez avec vos propres valeurs et v\'e9rifiez les r\'e8gles. V\'e9rifiez\cb1 \uc0\u8232 \cb3 que les philosophes meurent au bon moment, qu'ils ne volent pas de\cb1 \uc0\u8232 \cb3 fourchette, etc.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf4 \cb5 \strokec4 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb6 \strokec3 \'a0No\
\pard\pardeftab720\sa440\partightenfactor0
\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl600\sa60\partightenfactor0

\f0\b\fs56 \cf2 \cb3 Partie bonus\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\i\b0\fs32 \cf2 \
\pard\pardeftab720\sl440\sa220\partightenfactor0

\f0\i0\b\fs40 \cf2 \cb3 Code de philo_bonus\cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 - V\'e9rifiez que le code de philo_bonus respecte les points suivants et\cb1 \uc0\u8232 \cb3 demandez des explications :\cb1 \uc0\u8232 \cb3 - Assurez-vous qu'il y a un processus par philosophe et que le\cb1 \uc0\u8232 \cb3 processus initial attend les autres.\cb1 \uc0\u8232 \cb3 - Assurez-vous qu'il y a un unique s\'e9maphore pour repr\'e9senter le\cb1 \uc0\u8232 \cb3 nombre de fouchettes.\cb1 \uc0\u8232 \cb3 - V\'e9rifiez que l'output est prot\'e9g\'e9 contre les acc\'e8s multiples afin\cb1 \uc0\u8232 \cb3 d'\'e9viter un affichage m\'e9lang\'e9.\cb1 \uc0\u8232 \cb3 - Regardez comment la mort d'un philosophe est v\'e9rifi\'e9e et\cb1 \uc0\u8232 \cb3 assurez-vous qu'un s\'e9maphore emp\'eache le philosophe de mourir et de\cb1 \uc0\u8232 \cb3 commencer \'e0 manger exactement au m\'eame moment.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf4 \cb5 \strokec4 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb6 \strokec3 \'a0No\
\pard\pardeftab720\sl440\sa220\partightenfactor0

\f0\b\fs40 \cf2 \cb3 \strokec2 Tests philo_bonus\cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 - Ne testez pas avec plus de 200 philosphes.\cb1 \uc0\u8232 \cb3 - Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep set\cb1 \uc0\u8232 \cb3 \'e0 une valeur inf\'e9rieure \'e0 60 ms.\cb1 \uc0\u8232 \cb3 - Testez avec 5 800 200 200. Aucun philosophe ne devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 5 800 200 200 7. Aucun philosophe ne devrait mourir et\cb1 \uc0\u8232 \cb3 la args devrait s'arr\'eater quand les philosophes ont mang\'e9 au\cb1 \uc0\u8232 \cb3 moins 7 fois chacun.\cb1 \uc0\u8232 \cb3 - Testez avec 4 410 200 200. Aucun philosophe ne devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 4 310 200 100. Un philosophe devrait mourir.\cb1 \uc0\u8232 \cb3 - Testez avec 2 philosophes et v\'e9rifiez les timings (une mort prise\cb1 \uc0\u8232 \cb3 en compte avec un retard de plus de 10 ms est inacceptable).\cb1 \uc0\u8232 \cb3 - Testez avec vos propres valeurs et v\'e9rifiez les r\'e8gles. V\'e9rifiez\cb1 \uc0\u8232 \cb3 que les philosophes meurent au bon moment, qu'ils ne volent pas de\cb1 \uc0\u8232 \cb3 fourchette, etc.\cb1 \uc0\u8232 \
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf4 \cb5 \strokec4 \'a0Yes\
\pard\pardeftab720\sl440\qc\partightenfactor0
\cf3 \cb6 \strokec3 \'a0No\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
}